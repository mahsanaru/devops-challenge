- name: Vault Initialization
  hosts: localhost
  connection: local
  vars:
    vault_addr: "http://localhost:8200"
    credentials_file: "./app/vault_init.env"

  tasks:
    - name: Check if Vault is already initialized
      uri:
        url: "{{ vault_addr }}/v1/sys/init"
        method: GET
        return_content: yes
        status_code: 200
      register: vault_init_check

    - name: Set Vault initialized fact
      set_fact:
        vault_initialized: "{{ vault_init_check.json.initialized }}"

    - name: Initialize Vault if not already initialized
      uri:
        url: "{{ vault_addr }}/v1/sys/init"
        method: PUT
        body:
          secret_shares: 1
          secret_threshold: 1
        body_format: json
        return_content: yes
        status_code: 200
      when: not vault_initialized
      register: vault_init

    - name: Set unseal key and root token
      when: vault_init is defined and vault_init.json is defined
      set_fact:
        vault_unseal_key: "{{ vault_init.json.keys_base64[0] | default(vault_init.json.keys[0]) }}"
        vault_root_token: "{{ vault_init.json.root_token }}"

    - name: Write Vault credentials to .env file
      when: vault_root_token is defined and vault_unseal_key is defined
      copy:
        dest: "{{ credentials_file }}"
        content: |
          VAULT_TOKEN={{ vault_root_token }}
          UNSEAL_KEY={{ vault_unseal_key }}
        mode: '0600'

    - name: Unseal Vault
      uri:
        url: "{{ vault_addr }}/v1/sys/unseal"
        method: PUT
        body_format: json
        body:
          key: "{{ vault_unseal_key }}"
        status_code: 200
        return_content: yes

    - name: Enable KV v2 secrets engine
      uri:
        url: "{{ vault_addr }}/v1/sys/mounts/secret"
        method: POST
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        body_format: json
        body:
          type: kv
          options:
            version: 2
        status_code: 204

    - name: Load .env file content as fact
      set_fact:
        env_content: "{{ lookup('file', './.env') | split('\n') }}"

    - name: Parse POSTGRES_USER from .env
      set_fact:
        postgres_username: "{{ (env_content | select('match', '^POSTGRES_USER=') | list)[0].split('=', 1)[1] }}"

    - name: Parse POSTGRES_PASSWORD from .env
      set_fact:
        postgres_password: "{{ (env_content | select('match', '^POSTGRES_PASSWORD=') | list)[0].split('=', 1)[1] }}"

    - name: Seed PostgreSQL credentials
      uri:
        url: "{{ vault_addr }}/v1/secret/data/database"
        method: POST
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        body_format: json
        body:
          data:
            username: "{{ postgres_username }}"
            password: "{{ postgres_password }}"
          options:
            cas: 0
        status_code: 200
      register: seed_credentials_result
      failed_when: >
        seed_credentials_result.status != 200 and
        not (seed_credentials_result.status == 400 and
             'errors' in seed_credentials_result.json and
             'check-and-set parameter did not match the current version' in seed_credentials_result.json.errors | join(''))

    - name: Display credential seeding status
      debug:
        msg: "Credential seeding status for 'secret/data/database': {{ seed_credentials_result.status }}"
      when: seed_credentials_result.status == 200

    - name: Create policy for backend
      uri:
        url: "{{ vault_addr }}/v1/sys/policies/acl/backend-policy"
        method: PUT
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        body_format: json
        body:
          policy: |
            path "secret/data/database" {
              capabilities = ["read"]
            }

            path "secret/metadata/database" {
              capabilities = ["read"]
            }
        status_code: 204

    - name: Enable AppRole authentication method in Vault
      uri:
        url: "{{ vault_addr }}/v1/sys/auth/approle"
        method: POST
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        body_format: json
        body:
          type: approle
        status_code: 204

    - name: Create AppRole for backend
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/backend-role"
        method: POST
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        body_format: json
        body:
          token_policies: "backend-policy"
          token_ttl: 4h
        status_code: 204

    - name: Fetch Role ID
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/backend-role/role-id"
        method: GET
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        return_content: yes
      register: role_id

    - name: Generate Secret ID
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/role/backend-role/secret-id"
        method: POST
        headers:
          "X-Vault-Token": "{{ vault_root_token }}"
        return_content: yes
      register: secret_id

    - name: Append VAULT_ROLE_ID to credentials file
      lineinfile:
        path: "{{ credentials_file }}"
        line: "VAULT_ROLE_ID={{ role_id.json.data.role_id }}"
        create: yes
        mode: '0600'

    - name: Append VAULT_SECRET_ID to credentials file
      lineinfile:
        path: "{{ credentials_file }}"
        line: "VAULT_SECRET_ID={{ secret_id.json.data.secret_id }}"

    - name: Authenticate with AppRole to get VAULT_TOKEN
      uri:
        url: "{{ vault_addr }}/v1/auth/approle/login"
        method: POST
        body_format: json
        body:
          role_id: "{{ role_id.json.data.role_id }}"
          secret_id: "{{ secret_id.json.data.secret_id }}"
        status_code: 200
        return_content: true
      register: approle_login_result

    - name: Set VAULT_TOKEN as a fact
      set_fact:
        approle_vault_token: "{{ approle_login_result.json.auth.client_token }}"

    - name: Save AppRole VAULT_TOKEN to file
      copy:
        dest: "app/vault_credentials.env"
        content: |
          VAULT_TOKEN={{ approle_vault_token }}
        mode: '0600'